---
title: "Apache Arrow R JIRA Tickets"
format:
  html:
    page-layout: full
---

```{r}
#| label: load-packages-and-code
#| include: false
library(httr)
library(dplyr)
library(lubridate)
library(tidyr)
library(gt)
library(rlang)
library(httr)
library(dplyr)
library(jsonlite)

extract_issues <- function(jql){
  
  query <- paste("https://issues.apache.org/jira/rest/api/2/search?jql=", jql, collapse = "")
  
  out <- GET(URLencode(query))
  data <- content(out, as = "text") %>%
    jsonlite::fromJSON()
  
  issues <- data$issues
  
  tibble::tibble(
    name = issues$key,
    summary = issues$fields$summary,
    created = strptime(ymd_hms(issues$fields$created), "%F %T"),
    updated = strptime(ymd_hms(issues$fields$updated), "%F %T")  
  ) %>%
    mutate(name = paste0("<a href='https://issues.apache.org/jira/browse/",name,"' target='_blank'>", name , "</a>"))
}

show_gt <- function(table){
  gt(extract_issues(table)) %>%
    fmt_markdown(columns = c(name))
}

```

```{r}
#| include: false
library(gh)

extract_row <- function(issue){
  url <- issue$html_url
  tibble::tibble(
    name = paste0("<a href='",issue$html_url,"' target='_blank'>", paste0("#", issue$number, collapse = "") , "</a>"),
    summary = issue$title,
    created = issue$created_at,
    updated = issue$updated_at
  ) 
}

build_issue_table <- function(arrow_issues){
  r_issues <- arrow_issues[map_lgl(arrow_issues, is_r_issue)]
  map(r_issues, extract_row) %>%
    bind_rows()
}

is_pr <- function(issue){
  !is.null(issue$pull_request)
}

is_r_issue <- function(issue){
  !is_pr(issue) && "Component: R" %in% extract_labels(issue) 
}

extract_labels <- function(issue){
  map_chr(issue$labels, ~.x[["name"]])
}
```



::: {.panel-tabset}

### All R Tickets

All Arrow R tickets.

```{r}
#| echo: false
jql_all <- 'project = ARROW AND resolution = Unresolved AND summary ~ "\\\\[R\\\\]" ORDER BY created DESC, priority DESC, updated DESC'
```

JQL query: `r jql_all`

```{r}
#| echo: false

show_gt(jql_all)
```

### Possibly External Tickets

All Arrow R tickets not by core devs (this list subject to change, may be others to exclude).

```{r}
#| echo: false
jql_external <- 'project = ARROW AND resolution = Unresolved AND summary ~ "\\\\[R\\\\]" AND reporter not in (jonkeane, npr, dragosmg, thisisnic, willjones127, paleolimbot, assignUser, icook, jorisvandenbossche, stephhazlitt) ORDER BY created DESC, priority DESC, updated DESC'
```

JQL query: `r jql_external`

```{r}
#| echo: false

show_gt(jql_external)
```

### Untriaged

All Arrow R tickets not by core devs with no comments.

```{r}
#| echo: false
jql_uncommented <- 'project = ARROW AND issuetype in (Bug, Improvement, "New Feature") AND status = Open AND component in (R) AND reporter not in (jonkeane, npr, dragosmg, thisisnic, willjones127, paleolimbot, assignUser, icook, jorisvandenbossche, stephhazlitt) AND assignee in (EMPTY) AND issueFunction in hasComments(0) ORDER  BY created DESC'
```

JQL query: `r jql_uncommented`

```{r}
#| echo: false
show_gt(jql_uncommented)

```

### Untriaged - all reporters

All Arrow R tickets with no comments.

```{r}
#| echo: false
jql_uncommented_all <- 'project = ARROW AND issuetype in (Bug, Improvement, "New Feature") AND status = Open AND component in (R) AND assignee in (EMPTY) AND issueFunction in hasComments(0) ORDER  BY created DESC'
```

JQL query: `r jql_uncommented_all`

```{r}
#| echo: false
show_gt(jql_uncommented_all)
```

### Maintenance Backlog

All Arrow R tickets marked as bugs which are unresolved.

```{r}
#| echo: false
jql_bugs <- 'project = ARROW AND (component = R OR summary ~ "\\\\[R\\\\]") AND type = Bug AND status not in (Closed, Resolved) ORDER BY created DESC'
```

JQL query: `r jql_bugs`

```{r}
#| echo: false
show_gt(jql_bugs)
```

:::
